diff --git a/boost/interprocess/sync/posix/pthread_helpers.hpp b/boost/interprocess/sync/posix/pthread_helpers.hpp
index c615c851e..a9a63179e 100644
--- a/boost/interprocess/sync/posix/pthread_helpers.hpp
+++ b/boost/interprocess/sync/posix/pthread_helpers.hpp
@@ -41,7 +41,8 @@ namespace ipcdetail{
          if(pthread_mutexattr_init(&m_attr)!=0 ||
             pthread_mutexattr_setpshared(&m_attr, PTHREAD_PROCESS_SHARED)!= 0 ||
              (recursive &&
-              pthread_mutexattr_settype(&m_attr, PTHREAD_MUTEX_RECURSIVE)!= 0 ))
+              pthread_mutexattr_settype(&m_attr, PTHREAD_MUTEX_RECURSIVE) != 0)
+             || pthread_mutexattr_setrobust(&m_attr, PTHREAD_MUTEX_ROBUST) != 0)
             throw interprocess_exception("pthread_mutexattr_xxxx failed");
       }
 
diff --git a/boost/interprocess/sync/posix/mutex.hpp b/boost/interprocess/sync/posix/mutex.hpp
index 0a2c6f084..fd94557f1 100644
--- a/boost/interprocess/sync/posix/mutex.hpp
+++ b/boost/interprocess/sync/posix/mutex.hpp
@@ -93,15 +93,42 @@ inline posix_mutex::~posix_mutex()
 
 inline void posix_mutex::lock()
 {
-   if (pthread_mutex_lock(&m_mut) != 0)
+   int res = pthread_mutex_lock(&m_mut);
+   if (res == EOWNERDEAD) {
+      res = pthread_mutex_consistent(&m_mut);
+      pthread_mutex_unlock(&m_mut);
+      if (res == 0) {
+         res = pthread_mutex_lock(&m_mut);
+      }
+   } else if (res == ENOTRECOVERABLE) {
+      pthread_mutex_destroy(&m_mut);
+      mutexattr_wrapper mut_attr;
+      mutex_initializer mut(m_mut, mut_attr);
+      mut.release();
+      res = pthread_mutex_lock(&m_mut);
+   } else if (res != 0) {
       throw lock_exception();
+   }
 }
 
 inline bool posix_mutex::try_lock()
 {
    int res = pthread_mutex_trylock(&m_mut);
-   if (!(res == 0 || res == EBUSY))
+   if (res == EOWNERDEAD) {
+      res = pthread_mutex_consistent(&m_mut);
+      pthread_mutex_unlock(&m_mut);
+      if (res == 0) {
+         res = pthread_mutex_lock(&m_mut);
+      }
+   } else if (res == ENOTRECOVERABLE) {
+      pthread_mutex_destroy(&m_mut);
+      mutexattr_wrapper mut_attr;
+      mutex_initializer mut(m_mut, mut_attr);
+      mut.release();
+      res = pthread_mutex_lock(&m_mut);
+   } else if (!(res == 0 || res == EBUSY)) {
       throw lock_exception();
+   }
    return res == 0;
 }
 
@@ -115,8 +142,21 @@ inline bool posix_mutex::timed_lock(const boost::posix_time::ptime &abs_time)
    }
    timespec ts = ptime_to_timespec(abs_time);
    int res = pthread_mutex_timedlock(&m_mut, &ts);
-   if (res != 0 && res != ETIMEDOUT)
+   if (res == EOWNERDEAD) {
+      res = pthread_mutex_consistent(&m_mut);
+      pthread_mutex_unlock(&m_mut);
+      if (res == 0) {
+         res = pthread_mutex_lock(&m_mut);
+      }
+   } else if (res == ENOTRECOVERABLE) {
+      pthread_mutex_destroy(&m_mut);
+      mutexattr_wrapper mut_attr;
+      mutex_initializer mut(m_mut, mut_attr);
+      mut.release();
+      res = pthread_mutex_lock(&m_mut);
+   } else if (res != 0 && res != ETIMEDOUT) {
       throw lock_exception();
+   }
    return res == 0;
 
    #else //BOOST_INTERPROCESS_POSIX_TIMEOUTS